
set(SEP "/")

file(GLOB TARGET_SOURCE_LIST "${CMAKE_BINARY_DIR}${SEP}*.cpp")
string(REGEX REPLACE "${CMAKE_BINARY_DIR}((${SEP}[a-z0-9-]+)+)\\.cpp" "\\1" TARGET_LIST "${TARGET_SOURCE_LIST}")

get_filename_component(COMMON_DIR "${CMAKE_BINARY_DIR}${SEP}.." REALPATH)
set(COMMON_LIBRARY_DIR "${COMMON_DIR}${SEP}bin")
set(PROJECT_RUNTIME_DIR "${CMAKE_BINARY_DIR}${SEP}bin")

file(GLOB TARGET_SOURCE_LIST "${CMAKE_BINARY_DIR}${SEP}*.cpp")

set(COMMON_INCLUDE_DIR "${COMMON_DIR}${SEP}include")
file(GLOB COMMON_HEADER_LIST "${COMMON_INCLUDE_DIR}${SEP}*.hpp")

file(GLOB TMP "${COMMON_LIBRARY_DIR}${SEP}lib*.so")
string(REGEX REPLACE "${COMMON_LIBRARY_DIR}${SEP}lib([a-z0-9-]+)\\.so" "\\1" COMMON_LIBRARY_LIST "${TMP}")

message(STATUS "CMAKE_BINARY_DIR    = ${CMAKE_BINARY_DIR}")
message(STATUS "COMMON_DIR          = ${COMMON_DIR}")
message(STATUS "COMMON_INCLUDE_DIR  = ${COMMON_INCLUDE_DIR}")
message(STATUS "COMMON_LIBRARY_DIR  = ${COMMON_LIBRARY_DIR}")
message(STATUS "COMMON_HEADER_LIST  = ${COMMON_HEADER_LIST}")
message(STATUS "COMMON_LIBRARY_LIST = ${COMMON_LIBRARY_LIST}")
message(STATUS "PROJECT_RUNTIME_DIR = ${PROJECT_RUNTIME_DIR}")
message(STATUS "TARGET_SOURCE_LIST  = ${TARGET_SOURCE_LIST}")

cmake_minimum_required(VERSION 2.8.9)
project(ls-js-value-samples)

set(CMAKE_C_COMPILER_ID "GNU")
set(CMAKE_CXX_COMPILER_ID "GNU")
set(CMAKE_COMPILER_IS_GNUCXX TRUE)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_RUNTIME_DIR}")
LINK_DIRECTORIES("${COMMON_LIBRARY_DIR}")

include_directories("${COMMON_INCLUDE_DIR}")

#
# loop foreach target
#

foreach(MAIN_SRC IN LISTS TARGET_SOURCE_LIST)

message(STATUS "")

string(REGEX REPLACE "${CMAKE_BINARY_DIR}${SEP}([a-z0-9-]+)\\.cpp" "\\1" MAIN_EXE "${MAIN_SRC}")
string(REGEX REPLACE "(${CMAKE_BINARY_DIR}${SEP}[a-z0-9-]+)\\.cpp" "\\1" TARGET_BASE_DIR "${MAIN_SRC}")
message(STATUS "TARGET_BASE_DIR     = ${TARGET_BASE_DIR}")

set(TARGET_INCLUDE_DIR "${TARGET_BASE_DIR}${SEP}include")
file(GLOB TARGET_HEADER_LIST "${TARGET_INCLUDE_DIR}${SEP}*.hpp")
set(TARGET_SOURCE_DIR "${TARGET_BASE_DIR}${SEP}src")
file(GLOB TARGET_SOURCE_LIST "${TARGET_SOURCE_DIR}${SEP}*.cpp")

message(STATUS "")
message(STATUS "MAIN_EXE            = ${MAIN_EXE}")
message(STATUS "MAIN_SRC            = ${MAIN_SRC}")
message(STATUS "COMMON_HEADER_LIST  = ${COMMON_HEADER_LIST}")
message(STATUS "COMMON_LIBRARY_LIST = ${COMMON_LIBRARY_LIST}")
message(STATUS "TARGET_INCLUDE_DIR  = ${TARGET_INCLUDE_DIR}")
message(STATUS "TARGET_HEADER_LIST  = ${TARGET_HEADER_LIST}")
message(STATUS "TARGET_SOURCE_LIST  = ${TARGET_SOURCE_LIST}")

add_executable("${MAIN_EXE}" "${MAIN_SRC}" "${TARGET_SOURCE_LIST}" "${TARGET_HEADER_LIST}" "${COMMON_HEADER_LIST}")
target_include_directories("${MAIN_EXE}" PUBLIC "${TARGET_INCLUDE_DIR}")
target_link_libraries("${MAIN_EXE}" "${COMMON_LIBRARY_LIST}")

endforeach(MAIN_SRC)



